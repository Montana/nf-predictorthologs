#!/usr/bin/env nextflow
/*
========================================================================================
                         nf-core/predictorthologs
========================================================================================
 nf-core/predictorthologs Analysis Pipeline.
 #### Homepage / Documentation
 https://github.com/nf-core/predictorthologs
----------------------------------------------------------------------------------------
*/

def helpMessage() {
    // TODO nf-core: Add to this help message with new command line parameters
    log.info nfcoreHeader()
    log.info"""

    Usage:

    The typical command for running the pipeline is as follows:

    nextflow run nf-core/predictorthologs --reads '*_R{1,2}.fastq.gz' -profile docker

    Mandatory arguments:
      -profile [str]                Configuration profile to use. Can use multiple (comma separated)
                                    Available: conda, docker, singularity, test, awsbatch, <institute> and more
    Input Options:
      Sequencing reads (FASTQ format):
        --reads [file]                Path to input data (must be surrounded with quotes)
        --csv                         Comma-separated variable file containing the columns "sample_id" and "fasta" at minimum
                                      For differential hash expression, the columns "sig" and "group" are also required
      Protein input:
        --protein_fastas              Path to protein fastas

      Bam + bed file for intersection:
        --bam                         Path to a single bam file whose reads to intersect with the bed
        --bai                         Path to the above bam's bai index file, required for intersection
        --bed                         Path to a bed file containing regions of interest in the bam file

    hash2kmer options:
      --hashes                        Path to file of hashes whose sequence to find in the protein fastas, default None
      --sourmash_ksize               K-mer size to use to find matching k-mers in sequence, default 21
      --sourmash_molecule            Molecule type to use to find matching k-mers in sequence, default "protein"

   Differential hash expression options:
      --diff_hash_expression          If provided, compute enriched hashes in groups using logistic regression, by default don't do it
                                      This requires the --csv option and additional columns of "group" and "sig" in the csv

    Options:
      --single_end [bool]             Specifies that the input is single-end reads
      --skip_remove_duplicates_bam    If provided, skip removal of duplicates from bam file

    BLAST-like protein search options                        If not specified in the configuration file or you wish to overwrite any of the references
      --refseq_release        Valid terms from ftp://ftp.ncbi.nlm.nih.gov/refseq/release/,
                                      e.g. "complete", "archea", "plasmid", "protozoa", "viral".
                                      Default is "vertebrate_mammalian"
      --diamond_protein_fasta         Use all of manually curated, verified UniProt/SwissProt as the reference
                                      proteome for searching for orthologs
      --diamond_database              Pre-created database with DIAMOND
      --diamond_taxonmap_gz           Mapping of protein IDs to taxa
                                      Default is: "ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/accession2taxid/prot.accession2taxid.gz"
      --diamond_taxdmp_zip            Taxonomy dump file from NCBI
                                      Default is: "ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdmp.zip"


    Other options:
      --outdir [file]                 The output directory where the results will be saved
      --email [email]                 Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits
      --email_on_fail [email]         Same as --email, except only send mail if the workflow is not successful
      --max_multiqc_email_size [str]  Theshold size for MultiQC report to be attached in notification email. If file generated by pipeline exceeds the threshold, it will not be attached (Default: 25MB)
      -name [str]                     Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic

    AWSBatch options:
      --awsqueue [str]                The AWSBatch JobQueue that needs to be set when running on AWSBatch
      --awsregion [str]               The AWS Region for your AWS Batch job to run on
      --awscli [str]                  Path to the AWS CLI tool
    """.stripIndent()
}

// Show help message
if (params.help) {
    helpMessage()
    exit 0
}

/*
 * SET UP CONFIGURATION VARIABLES
 */

// Check if genome exists in the config file
if (params.genomes && params.genome && !params.genomes.containsKey(params.genome)) {
    exit 1, "The provided genome '${params.genome}' is not available in the iGenomes file. Currently the available genomes are ${params.genomes.keySet().join(", ")}"
}

// TODO nf-core: Add any reference files that are needed
// Configurable reference genomes
//
// NOTE - THIS IS NOT USED IN THIS PIPELINE, EXAMPLE ONLY
// If you want to use the channel below in a process, define the following:
//   input:
//   file fasta from ch_fasta
//
params.fasta = params.genome ? params.genomes[ params.genome ].fasta ?: false : false
if (params.fasta) { ch_fasta = file(params.fasta, checkIfExists: true) }

// Has the run name been specified by the user?
//  this has the bonus effect of catching both -name and --name
custom_runName = params.name
if (!(workflow.runName ==~ /[a-z]+_[a-z]+/)) {
    custom_runName = workflow.runName
}

////////////////////////////////////////////////////
/* --                   AWS                    -- */
////////////////////////////////////////////////////
if (workflow.profile.contains('awsbatch')) {
    // AWSBatch sanity checking
    if (!params.awsqueue || !params.awsregion) exit 1, "Specify correct --awsqueue and --awsregion parameters on AWSBatch!"
    // Check outdir paths to be S3 buckets if running on AWSBatch
    // related: https://github.com/nextflow-io/nextflow/issues/813
    if (!params.outdir.startsWith('s3:')) exit 1, "Outdir not on S3 - specify S3 Bucket to run on AWSBatch!"
    // Prevent trace files to be stored on S3 since S3 does not support rolling files.
    if (params.tracedir.startsWith('s3:')) exit 1, "Specify a local tracedir or run without trace! S3 cannot be used for tracefiles."
}

// Stage config files
ch_multiqc_config = file("$baseDir/assets/multiqc_config.yaml", checkIfExists: true)
ch_multiqc_custom_config = params.multiqc_config ? Channel.fromPath(params.multiqc_config, checkIfExists: true) : Channel.empty()
ch_output_docs = file("$baseDir/docs/output.md", checkIfExists: true)

////////////////////////////////////////////////////
/* --          Parse input reads               -- */
////////////////////////////////////////////////////

if (params.hashes) {
  Channel.fromPath(params.hashes, checkIfExists: true)
      .ifEmpty { exit 1, "params.hashes was empty - no input files supplied" }
      .set { ch_hashes }

  Channel.fromPath(params.hashes, checkIfExists: true)
      .ifEmpty { exit 1, "params.hashes was empty - no input files supplied" }
      .splitText()
      .map{ row -> tuple(row.replaceAll("\\s+", ""), "hash")}
      .transpose()
      .into {
        ch_hash_to_group_for_joining_after_hash2kmer ;
        ch_hash_to_group_for_joining_after_hash2sig ;
        ch_group_to_hashes_for_hash2kmer }

  ch_group_to_hashes_for_hash2kmer
    .map{ it -> it[0] }
    .into{ ch_hashes_for_hash2kmer; ch_hashes_for_hash2sig }
}

if (params.bam && params.bed && params.bai && !(params.reads || params.readPaths )) {
    // params needed for intersection
    log.info "supplied bam, not looking at any supplied --reads"
    Channel.fromPath(params.bai, checkIfExists: true)
        .ifEmpty { exit 1, "params.bai was empty - no input files supplied" }
        .set { ch_bai }
    Channel.fromPath(params.bam, checkIfExists: true)
        .ifEmpty { exit 1, "params.bam was empty - no input files supplied" }
        .combine(ch_bai)
        .set { ch_bam_bai }
    Channel.fromPath(params.bed, checkIfExists: true)
        .ifEmpty { exit 1, "params.bed was empty - no input files supplied" }
        .splitText()
        .map {row -> row.split()}
        .map { row -> [ row[3], row[0], row[1], row[2] ] } // get interval name, chrm, start and stop
        .combine(ch_bam_bai)
        .set {ch_bed_bam_bai}
} else if (params.bam && !params.skip_remove_duplicates_bam && !params.bai) {
    // deciding if sambamba steps are needed
    log.info "supplied bam and no skip_remove_duplicates flag specified"
    Channel.fromPath(params.bam, checkIfExists: true)
        .ifEmpty { exit 1, "params.bam was empty, no input file supplied" }
        .into { ch_bam_for_dedup }
} else if (params.input_is_protein) {
  log.info 'Using protein fastas as input -- ignoring reads and bams'
  ////////////////////////////////////////////////////
  /* --          Parse protein fastas            -- */
  ////////////////////////////////////////////////////
  if (params.protein_fastas){
    Channel.fromPath(params.protein_fastas, checkIfExists: true)
        .ifEmpty { exit 1, "params.protein_fastas was empty - no input files supplied" }
        .set { ch_protein_fastas }
  } else if (params.csv && params.input_is_protein) {
    // Provided a csv file mapping sample_id to protein fasta path
    Channel
      .fromPath(params.csv, checkIfExists: true)
      .ifEmpty { exit 1, "params.csv was empty" }
      .splitCsv(header:true)
      .map{ row -> tuple(row.sample_id, tuple(file(row.fasta)))}
      .ifEmpty { exit 1, "params.csv (${params.csv}) was empty - no input files supplied" }
      .set { ch_protein_fastas }
  } else if (params.protein_fasta_paths){
    Channel
      .from(params.protein_fasta_paths, checkIfExists: true)
      .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true)] ] }
      .ifEmpty { exit 1, "params.protein_fasta_paths was empty - no input files supplied" }
      .dump(tag: "protein_fasta_paths")
      .set { ch_protein_fastas }
  }
  if (!(params.diff_hash_expression || params.hashes)) {
    // No hashes - just do a diamond blastp search for each peptide fasta
    // Not extracting the sequences containing hashes of interest
    ch_protein_fastas
      .set { ch_protein_seq_for_diamond }
  }
} else {
  // * Create a channel for input read files
  if (params.csv && params.csv_has_reads) {
    // Provided a csv file mapping sample_id to read(s) fastq path
    log.info "supplied csv, not looking at any supplied --reads or readPaths"
    if (params.single_end) {
      Channel
        .fromPath(params.csv)
        .ifEmpty { exit 1, "params.csv was empty" }
        .splitCsv(header:true)
        .map{ row -> tuple(row.sample_id, tuple(file(row.read1)))}
        .ifEmpty { exit 1, "params.csv (${params.csv}) was empty - no input files supplied" }
        .dump(tag: "reads_single_end")
        .into { ch_read_files_fastqc; ch_read_files_trimming; ch_read_files_translate }
    } else {
      Channel
        .fromPath(params.csv)
        .ifEmpty { exit 1, "params.csv was empty" }
        .splitCsv(header:true)
        .map{ row -> tuple(row.sample_id, tuple(file(row.read1), file(row.read2)))}
        .ifEmpty { exit 1, "params.csv (${params.csv}) was empty - no input files supplied" }
        .dump(tag: "reads_paired_end")
        .into { ch_read_files_fastqc; ch_read_files_trimming; ch_read_files_translate }
    }
   } else if (params.readPaths){
    log.info "supplied readPaths, not looking at any supplied --reads"
    if (params.single_end) {
      Channel
        .from(params.readPaths)
        .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true) ] ] }
        .ifEmpty { exit 1, "params.readPaths was empty - no input files supplied" }
        .dump(tag: "reads_single_end")
        .into { ch_read_files_fastqc; ch_read_files_trimming; ch_read_files_translate }
    } else {
      Channel
        .from(params.readPaths)
        .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true), file(row[1][1], checkIfExists: true) ] ] }
        .ifEmpty { exit 1, "params.readPaths was empty - no input files supplied" }
        .dump(tag: "reads_paired_end")
        .into { ch_read_files_fastqc; ch_read_files_trimming; ch_read_files_translate }
    }
  } else {
    Channel
      .fromFilePairs(params.reads, size: params.single_end ? 1 : 2)
      .ifEmpty { exit 1, "Cannot find any reads matching: ${params.reads}\nNB: Path needs to be enclosed in quotes!\nIf this is single-end data, please specify --single_end on the command line." }
      .dump(tag: "read_paths")
      .into { ch_read_files_fastqc; ch_read_files_trimming }
  }
}

if (params.hashes){
  Channel.fromPath(params.hashes, checkIfExists: true)
      .ifEmpty { exit 1, "params.hashes was empty - no input files supplied" }
      .map { it -> tuple(it.getBaseName(), file(it)) }
      .set { ch_informative_hashes_files_for_grouped_search }


  Channel.fromPath(params.hashes, checkIfExists: true)
      .ifEmpty { exit 1, "params.hashes was empty - no input files supplied" }
      .splitText()
      .map{ row -> tuple(row.replaceAll("\\s+", ""), "hash" )}
      .transpose()
      .into { ch_hash_to_group_for_joining_after_hash2kmer;
        ch_hash_to_group_for_joining_after_hash2sig;
        ch_hash_to_group_for_hash2kmer;
        ch_hash_to_group_for_hash2sig
       }
}

////////////////////////////////////////////////////
/* --         Parse gene counting       -- */
////////////////////////////////////////////////////
if (params.featurecounts_hashes) {
  if (params.csv) {
    // Provided a csv file mapping sample_id to protein fasta path
    Channel
      .fromPath(params.csv, checkIfExists: true)
      .splitCsv(header:true)
      .dump( tag: 'featurecounts_hashes_csv' )
      .map{ row -> tuple(row.sample_id, file(row.bam, checkIfExists: true)) }
      .ifEmpty { exit 1, "params.csv (${params.csv}) 'bam' column was empty - no input files supplied" }
      .dump( tag: 'ch_sample_id_and_bam' )
      .set { ch_sample_id_and_bam }

      if ( params.csv_has_is_aligned ) {
        // Provided a csv file mapping sample_id to protein fasta path
        Channel
          .fromPath ( params.csv, checkIfExists: true )
          .splitCsv ( header:true )
          .branch { row ->
            aligned: row.is_aligned == "aligned"
            unaligned: row.is_aligned == "unaligned"
          }
          .set { ch_csv_is_aligned }

        ch_csv_is_aligned.aligned
          .dump( tag: 'ch_csv_is_aligned.aligned' )
          .map{ row -> tuple(row.group, row.sample_id, row.sig, file(row.fasta), file(row.bam)) }
          .dump( tag: 'ch_aligned_sig_fasta_bam' )
          .set { ch_aligned_sig_fasta_bam }

        ch_csv_is_aligned.unaligned
          .dump( tag: 'ch_csv_is_aligned.unaligned' )
          .map{ row -> tuple(row.group, row.sample_id, file(row.fasta)) }
          .dump( tag: 'ch_group_to_id_fasta__unaligned' )
          .set { ch_group_to_id_fasta }
      } else {
        Channel
          .fromPath ( params.csv, checkIfExists: true )
          .splitCsv( header: true )
          .map{ row -> tuple(row.group, row.sample_id, file(row.fasta)) }
          .dump( tag: 'ch_group_to_id_fasta' )
          .set { ch_group_to_id_fasta }
      }

      ////////////////////////////////////////////////////
      /* --            Parse GTF info                -- */
      ////////////////////////////////////////////////////

      if (!params.skip_orthology_qc && params.csv_has_gtf) {
        // Provided a csv file mapping sample_id to protein fasta path
        Channel
          .fromPath(params.csv, checkIfExists: true)
          .splitCsv(header:true)
          .map{ row -> tuple(row.sample_id, file(row.gtf, checkIfExists: true)) }
          .ifEmpty { exit 1, "params.csv (${params.csv}) 'gtf' column was empty - no input files supplied" }
          .dump( tag: 'ch_sample_id_to_gtf' )
          // [DUMP: ch_sample_id_to_gtf]
          //    ['SRR306827_GSM752680_ppa_br_F_2',
          //     Pan_paniscus.panpan1.1.97.gtf]
          .set { ch_sample_id_to_gtf }

        }
  } else {
    exit 1, "Must provide --csv when filtering bams for hashes"
  }
}

////////////////////////////////////////////////////
/* --         Parse gene counting       -- */
////////////////////////////////////////////////////
if (params.csv_has_is_aligned) {
  if (params.csv) {
    Channel
      .fromPath ( params.csv )
      .ifEmpty { exit 1, "params.csv was empty" }
      .splitCsv ( header:true )
      .branch { row ->
        aligned: row.is_aligned == "aligned"
        unaligned: row.is_aligned == "unaligned"
      }
      .set { ch_csv_is_aligned }

      // Create channel of signatures per group
    Channel
      .fromPath(params.csv)
      .ifEmpty { exit 1, "params.csv was empty" }
      .splitCsv(header:true)
      // .filter{ row -> row.is_aligned == 'unaligned' }
      // .ifEmpty { exit 1, "is_aligned column can contain only aligned/unaligned values"}
      .dump( tag: 'csv_unaligned' )
      .map{ row -> tuple(row.group, row.is_aligned, file(row.sig, checkIfExists: true)) }
      .ifEmpty { exit 1, "params.csv (${params.csv}) 'group' or 'sig' column was empty" }
      .groupTuple( by: [0, 1] )
      .dump( tag: 'ch_per_group_unaligned_sig' )
      .set{ ch_per_group_unaligned_sig }

    ch_csv_is_aligned.unaligned
      .dump( tag: 'ch_csv_is_aligned.unaligned' )
      .map{ row -> tuple(row.group, row.sample_id, row.sig, row.fasta) }
      .dump( tag: 'ch_unaligned_sig_fasta' )
      .set { ch_unaligned_sig_fasta }

  } else {
    exit 1, "Must provide --csv when doing filtering for aligned/unaligned hashes"
  }
}

ch_orthology_types_header = Channel.fromPath("$baseDir/assets/orthology_types_header.txt", checkIfExists: true)
orthology_type = params.fc_orthology_type
// Hardcode the stranddness for nwo
forwardStranded = params.forwardStranded
reverseStranded = params.reverseStranded
unStranded = params.unStranded

////////////////////////////////////////////////////
/* --    Parse differential hash expression    -- */
////////////////////////////////////////////////////
if (params.diff_hash_expression) {
  if (params.csv) {
    // Create metadata csv channel
    Channel
      .fromPath(params.csv)
      .ifEmpty { exit 1, "params.csv was empty" }
      .set { ch_csv }


    // Create channel of all signatures
    Channel
      .fromPath(params.csv)
      .ifEmpty { exit 1, "params.csv was empty" }
      .splitCsv(header:true)
      .map{ row -> file(row.sig) }
      .ifEmpty { exit 1, "params.csv (${params.csv}) 'sig' column was empty" }
      .collect()
      .map{ it -> [it] }   // Nest within a list so the combine() step keeps all the signatures together
      // [DUMP: ch_all_signatures_flat_list_for_diff_hash]
      //    [[MACA_24m_M_BM_60__unaligned__CCACCTAAGTCCAGGA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //      MACA_24m_M_BM_60__unaligned__AGTTGGTCAAATCCGT_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //      10X_P1_14__unaligned__ACGGCCAAGCGTTGCC_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //      MACA_24m_M_BM_58__unaligned__CTAGTGAGTCCAACTA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //      MACA_24m_M_SPLEEN_59__unaligned__GCGACCAGTCATCGGC_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //      10X_P4_2__unaligned__GACGTTACACCCATGG_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //      MACA_24m_M_HEPATOCYTES_58__unaligned__GCAGCCAAGTAGCGGT_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //      MACA_21m_F_NPC_54__unaligned__CCCAGTTTCGTAGATC_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //      10X_P4_2__unaligned__ATCGAGTCACCAGTTA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //      10X_P5_0__unaligned__TCCACACCACATTTCT_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig]]
      .dump( tag: "ch_all_signatures_flat_list_for_diff_hash" )
      .set{ ch_all_signatures_flat_list_for_diff_hash }

    // Create channel of all signatures, completely flattened
    Channel
      .fromPath(params.csv)
      .splitCsv(header:true)
      .map{ row -> tuple(row.group, file(row.sig, checkIfExists: true)) }
      .ifEmpty { exit 1, "params.csv (${params.csv}) 'sig' column was empty" }
      .groupTuple()
      .set{ ch_group_to_signatures }

    // Create channel of all signatures, completely flattened
    Channel
      .fromPath(params.csv)
      .splitCsv(header:true)
      .map{ row -> [ row.sig.split(File.separator)[-1], row.sample_id, file(row.fasta, checkIfExists: true) ] }
      .ifEmpty { exit 1, "params.csv (${params.csv}) 'sig' and/or 'fasta' columns were empty" }
      // [DUMP: ch_sig_basename_to_fasta]
      //    [MACA_24m_M_BM_60__unaligned__CCACCTAAGTCCAGGA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //     MACA_24m_M_BM_60__unaligned__CCACCTAAGTCCAGGA,
      //     /czbiohub/test-datasets/predictorthologs/testdata/diff-hash/fasta/MACA_24m_M_BM_60__unaligned__CCACCTAAGTCCAGGA__coding_reads_peptides.fasta]
      .dump ( tag: 'ch_sig_basename_to_id_and_fasta' )
      .set{ ch_sig_basename_to_id_and_fasta }

    // Create channel of fastas per group
    Channel
      .fromPath(params.csv)
      .splitCsv(header:true)
      .map{ row -> tuple(row.group, file(row.fasta, checkIfExists: true)) }
      .ifEmpty { exit 1, "params.csv (${params.csv}) 'fasta' column was empty" }
      .groupTuple()
      .dump( tag: 'ch_group_to_fasta' )
      .set{ ch_group_to_fasta }


    // Create channel of fastas per group, per sample id
    Channel
      .fromPath(params.csv)
      .splitCsv(header:true)
      .map{ row -> tuple(row.group, row.sample_id, file(row.fasta, checkIfExists: true)) }
      .ifEmpty { exit 1, "params.csv (${params.csv}) 'fasta' column was empty" }
      .dump( tag: 'ch_group_to_id_fasta' )
      .set{ ch_group_to_id_fasta }


    // Create channel of fastas for each signature name
    Channel
      .fromPath(params.csv)
      .splitCsv(header:true)
      .map{ row -> tuple(file(row.sig).getBaseName(), file(row.fasta, checkIfExists: true) ) }
      .ifEmpty { exit 1, "params.csv (${params.csv}) 'fasta' column was empty" }
      .groupTuple()
      .dump( tag: 'ch_sig_filename_to_fasta' )
      .set{  ch_sig_filename_to_fasta }

    // Create channel of signatures per group
    Channel
      .fromPath(params.csv)
      .splitCsv(header:true)
      .map{ row -> tuple(row.group) }
      .unique()
      .ifEmpty { exit 1, "params.csv (${params.csv}) 'group' column was empty" }
      .dump(tag: 'csv_unique_groups')
      // [DUMP: csv_unique_groups] ['Mostly marrow unaligned']
      // [DUMP: csv_unique_groups] ['Liver unaligned']
      .combine( ch_all_signatures_flat_list_for_diff_hash )
      .dump(tag: 'ch_groups_with_all_signatures_for_diff_hash')
      // [DUMP: ch_groups_with_all_signatures_for_diff_hash]
      //    ['Mostly marrow unaligned',
      //      [MACA_24m_M_BM_60__unaligned__CCACCTAAGTCCAGGA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //       MACA_24m_M_BM_60__unaligned__AGTTGGTCAAATCCGT_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //       10X_P1_14__unaligned__ACGGCCAAGCGTTGCC_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //       MACA_24m_M_BM_58__unaligned__CTAGTGAGTCCAACTA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //       MACA_24m_M_SPLEEN_59__unaligned__GCGACCAGTCATCGGC_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //       10X_P4_2__unaligned__GACGTTACACCCATGG_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //       MACA_24m_M_HEPATOCYTES_58__unaligned__GCAGCCAAGTAGCGGT_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //       MACA_21m_F_NPC_54__unaligned__CCCAGTTTCGTAGATC_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //       10X_P4_2__unaligned__ATCGAGTCACCAGTTA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //       10X_P5_0__unaligned__TCCACACCACATTTCT_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig]]
      // [DUMP: ch_groups_with_all_signatures_for_diff_hash]
      //  ['Liver unaligned',
      //    [MACA_24m_M_BM_60__unaligned__CCACCTAAGTCCAGGA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //     MACA_24m_M_BM_60__unaligned__AGTTGGTCAAATCCGT_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //     10X_P1_14__unaligned__ACGGCCAAGCGTTGCC_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //     MACA_24m_M_BM_58__unaligned__CTAGTGAGTCCAACTA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //     MACA_24m_M_SPLEEN_59__unaligned__GCGACCAGTCATCGGC_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //     10X_P4_2__unaligned__GACGTTACACCCATGG_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //     MACA_24m_M_HEPATOCYTES_58__unaligned__GCAGCCAAGTAGCGGT_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //     MACA_21m_F_NPC_54__unaligned__CCCAGTTTCGTAGATC_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //     10X_P4_2__unaligned__ATCGAGTCACCAGTTA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //     10X_P5_0__unaligned__TCCACACCACATTTCT_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig]]
      .set { ch_groups_with_all_signatures_for_diff_hash }
    // exit 1, "testing"
  } else {
    exit 1, "--csv is required for differential hash expression!"
  }
}


////////////////////////////////////////////////////
/* --        Parse reference proteomes         -- */
////////////////////////////////////////////////////
if (params.proteome_translate_fasta) {
  Channel.fromPath(params.proteome_translate_fasta, checkIfExists: true)
       .ifEmpty { exit 1, "Peptide fasta file not found: ${params.proteome_translate_fasta}" }
       .set{ ch_proteome_translate_fasta }
}

raw_search_reference = params.proteome_search_fasta || params.refseq_release
searching_hashes = params.protein_searcher == "sourmash" || params.diff_hash_expression || params.hashes
searching_seqs = params.diff_hash_expression || params.protein_searcher == "diamond"

if (searching_seqs && !(raw_search_reference || params.diamond_database)) {
  exit 1, "Error! Must provide a search database for searching sequences if using DIAMOND search post diff hash"
}

if (params.diamond_database){
  Channel.fromPath(params.diamond_database, checkIfExists: true)
       .ifEmpty { exit 1, "Diamond database file not found: ${params.diamond_database}" }
       .set{ ch_diamond_db }
}
if (searching_hashes && params.sourmash_index){
  Channel.fromPath(params.sourmash_index, checkIfExists: true)
       .ifEmpty { exit 1, "Sourmash SBT Index file not found: ${params.sourmash_index}" }
       .set{ ch_sourmash_index }
}

if ( searching_hashes && !(raw_search_reference || params.sourmash_index) && !(params.protein_searcher == "diamond") ) {
  exit 1, "Error! If sourmash is the protein searcher, must provide either a --sourmash_index (.sbt.zip file), a --proteome_search_fasta file, a --refseq_release, "
}


if (params.proteome_search_fasta) {
Channel.fromPath(params.proteome_search_fasta, checkIfExists: true)
     .ifEmpty { exit 1, "Reference proteome fasta file not found: ${params.proteome_search_fasta}" }
     .into{ ch_diamond_reference_fasta; ch_sourmash_reference_fasta }
}
if (params.taxonmap_gz) {
Channel.fromPath(params.taxonmap_gz, checkIfExists: true)
     .ifEmpty { exit 1, "Diamond Taxon map file not found: ${params.taxonmap_gz}" }
     .set{ ch_diamond_taxonmap_gz }
}
if (params.taxdmp_zip) {
Channel.fromPath(params.taxdmp_zip, checkIfExists: true)
     .ifEmpty { exit 1, "Diamond taxon dump file not found: ${params.taxdmp_zip}" }
     .set{ ch_diamond_taxdmp_zip }
}


if (params.search_noncoding && params.infernal_db) {
  if (hasExtension(params.infernal_db, 'gz')) {
    Channel.fromPath(params.infernal_db, checkIfExists: true)
         .ifEmpty { exit 1, "Infernal database file not found: ${params.infernal_db}" }
         .set{ ch_infernal_db_gz }
  } else {
    Channel.fromPath(params.infernal_db, checkIfExists: true)
         .ifEmpty { exit 1, "Infernal database file not found: ${params.infernal_db}" }
         .set{ ch_infernal_db }
  }
}

if (params.search_noncoding && params.rfam_clan_info){
  Channel.fromPath(params.rfam_clan_info, checkIfExists: true)
       .ifEmpty { exit 1, "Rfam Clan Information file not found: ${params.rfam_clan_info}" }
       .set{ ch_rfam_clan_info }
}

//////////////////////////////////////////////////////////////////
/* -     Parse translate and diamond parameters         -- */
//////////////////////////////////////////////////////////////////
peptide_ksize = params.translate_peptide_ksize?.toString().tokenize(',')
peptide_molecule = params.translate_peptide_molecule?.toString().tokenize(',')
jaccard_threshold = params.translate_jaccard_threshold
refseq_release = params.refseq_release
tablesize = params.translate_tablesize

//////////////////////////////////////////////////////////////////
/* -        Parse sourmash/hash2kmer parameters              -- */
//////////////////////////////////////////////////////////////////
sourmash_ksize = params.sourmash_ksize
sourmash_molecule = params.sourmash_molecule
sourmash_log2_sketch_size = params.sourmash_log2_sketch_size
sourmash_scaled = params.sourmash_scaled
sourmash_searcher = params.sourmash_searcher
sourmash_search_flags = params.sourmash_search_flags

if ((params.protein_searcher == "diamond") && (params.sourmash_searcher == "search")) {
  exit 1, "Can only search with DIAMOND as a backup for unassigned hashes in sourmash if using --sourmash_searcher 'gather'"
}

if (params.diff_hash_expression || params.hashes || params.protein_searcher == "sourmash") {
  if (!sourmash_scaled) {
    exit 1, "--sourmash_scaled must be set if --diff_hash_expression, --hashes or --protein_searcher sourmash are set"
  }
  if (!sourmash_ksize) {
    exit 1, "--sourmash_ksize must be set if --diff_hash_expression, --hashes or --protein_searcher sourmash are set"
  }
  if (!sourmash_molecule) {
    exit 1, "--sourmash_molecule must be set if --diff_hash_expression, --hashes or --protein_searcher sourmash are set"
  }
}

//////////////////////////////////////////////////////////////////
/* -        Summarize reference proteome parameters          -- */
//////////////////////////////////////////////////////////////////
provided_reference_proteome = params.proteome_search_fasta || params.refseq_release
existing_reference = params.diamond_database || params.sourmash_index
need_refseq_download = !existing_reference && !params.proteome_search_fasta && params.refseq_release


//////////////////////////////////////////////////////////////////
/* -   Parse differential hash expression parameters         -- */
//////////////////////////////////////////////////////////////////
diff_hash_with_abundance = params.diff_hash_with_abundance
diff_hash_inverse_regularization_strength = params.diff_hash_inverse_regularization_strength
diff_hash_solver = params.diff_hash_solver
diff_hash_penalty = params.diff_hash_penalty
diff_hash_max_group_size = params.diff_hash_max_group_size
diff_hash_min_cells = params.diff_hash_min_cells
diff_hash_min_abundance = params.diff_hash_min_abundance


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                       HEADER LOG INFO                               -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
using_hashes = params.diff_hash_expression || params.hashes
log.info nfcoreHeader()
def summary = [:]
if (workflow.revision) summary['Pipeline Release'] = workflow.revision
summary['Run Name']         = custom_runName ?: workflow.runName
// Input is sequencing reads --> need to convert to protein
if (params.csv) summary['CSV of samples']                                   = params.csv
if (params.bam) summary['bam']                                              = params.bam
if (params.bam) summary['bai']                                              = params.bai
if (params.bed) summary['bed']                                              = params.bed
if (params.reads) summary['Reads']                                          = params.reads
if (!params.input_is_protein) summary['sencha translate Ref']               = params.proteome_translate_fasta
// Input is protein -- have protein sequences and hashes
summary['Diff Hash']                                                        = params.diff_hash_expression
if (params.diff_hash_expression) summary['Diff Hash abundance?']            = params.diff_hash_with_abundance
if (params.diff_hash_expression) summary['Diff Hash min cells']             = params.diff_hash_min_cells
if (params.diff_hash_expression) summary['Diff Hash min abundance']         = params.diff_hash_min_abundance
if (params.diff_hash_expression) summary['Diff Hash C']                     = params.diff_hash_inverse_regularization_strength
if (params.diff_hash_expression) summary['Diff Hash solver']                = params.diff_hash_solver
if (params.diff_hash_expression) summary['Diff Hash penalty']               = params.diff_hash_penalty
if (params.diff_hash_expression) summary['Diff Hash Max group size']        = params.diff_hash_max_group_size
if (params.protein_fastas) summary['Input protein fastas']                  = params.protein_fastas
// How the DIAMOND search database is created
if (params.proteome_search_fasta) summary['Proteome search ref']            = params.proteome_search_fasta
summary['Protein searcher']                                                 = params.protein_searcher
if (params.hashes) summary['Hashes']                                        = params.hashes
if (using_hashes) summary['sourmash searcher']                                = params.sourmash_searcher
if (using_hashes) summary['sourmash ksize']                                = params.sourmash_ksize
if (using_hashes) summary['sourmash molecule']                             = params.sourmash_molecule
if (using_hashes) summary['sourmash scaled']                             = params.sourmash_scaled
if (need_refseq_download) summary['Refseq release']        = params.refseq_release
if (params.diamond_database) summary['DIAMOND pre-build database']     = params.diamond_database
if (params.protein_searcher == 'diamond') summary['Map sequences to taxon']     = params.taxonmap_gz
if (params.protein_searcher == 'diamond') summary['Taxonomy database dump']     = params.taxdmp_zip
summary['Data Type']        = params.single_end ? 'Single-End' : 'Paired-End'
summary["Featurecounts hashes"]                                                 = params.featurecounts_hashes
// summary['Data Type']        = params.single_end ? 'Single-End' : 'Paired-End'
summary['Max Resources']    = "$params.max_memory memory, $params.max_cpus cpus, $params.max_time time per job"
if (workflow.containerEngine) summary['Container'] = "$workflow.containerEngine - $workflow.container"
summary['Output dir']       = params.outdir
summary['Launch dir']       = workflow.launchDir
summary['Working dir']      = workflow.workDir
summary['Script dir']       = workflow.projectDir
summary['User']             = workflow.userName
if (workflow.profile.contains('awsbatch')) {
    summary['AWS Region']   = params.awsregion
    summary['AWS Queue']    = params.awsqueue
    summary['AWS CLI']      = params.awscli
}
summary['Config Profile'] = workflow.profile
if (params.config_profile_description) summary['Config Description'] = params.config_profile_description
if (params.config_profile_contact)     summary['Config Contact']     = params.config_profile_contact
if (params.config_profile_url)         summary['Config URL']         = params.config_profile_url
if (params.email || params.email_on_fail) {
    summary['E-mail Address']    = params.email
    summary['E-mail on failure'] = params.email_on_fail
    summary['MultiQC maxsize']   = params.max_multiqc_email_size
}
log.info summary.collect { k,v -> "${k.padRight(25)}: $v" }.join("\n")
log.info "-\033[2m--------------------------------------------------\033[0m-"

// Check the hostnames against configured profiles
checkHostname()

def create_workflow_summary(summary) {
    def yaml_file = workDir.resolve('workflow_summary_mqc.yaml')
    yaml_file.text  = """
    id: 'nf-core-predictorthologs-summary'
    description: " - this information is collected when the pipeline is started."
    section_name: 'czbiohub/nf-predictorthologs Workflow Summary'
    section_href: 'https://github.com/czbiohub/predictorthologs'
    plot_type: 'html'
    data: |
        <dl class=\"dl-horizontal\">
${summary.collect { k,v -> "            <dt>$k</dt><dd><samp>${v ?: '<span style=\"color:#999999;\">N/A</a>'}</samp></dd>" }.join("\n")}
        </dl>
    """.stripIndent()

   return yaml_file
}


/*
 * Parse software version numbers
 */
process get_software_versions {
    publishDir "${params.outdir}/pipeline_info", mode: 'copy',
        saveAs: { filename ->
                      if (filename.indexOf(".csv") > 0) filename
                      else null
                }

    output:
    file 'software_versions_mqc.yaml' into ch_software_versions_yaml
    file "software_versions.csv"

    script:
    // TODO nf-core: Get all tools to print their version number here
    // (base) root@aa580bfc0d2f:/# fastp --version
    // fastp 0.20.0
    // (base) root@aa580bfc0d2f:/# diamond version
    // diamond v0.9.30.131 (C) Max Planck Society for the Advancement of Science
    // Documentation, support and updates available at http://www.diamondsearch.org
    //
    // diamond version 0.9.30
    // (base) root@aa580bfc0d2f:/# samtools --version
    // samtools 1.10
    // Using htslib 1.10.2
    // Copyright (C) 2019 Genome Research Ltd.
    """
    echo $workflow.manifest.version > v_pipeline.txt
    echo $workflow.nextflow.version > v_nextflow.txt
    fastqc --version > v_fastqc.txt
    multiqc --version > v_multiqc.txt
    fastp --version > v_fastp.txt
    diamond version > v_diamond.txt
    samtools --version > v_samtools.txt
    scrape_software_versions.py &> software_versions_mqc.yaml
    """
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --               PREPROCESSING SAMBAMBA DEDUPLICATION                  -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

if (params.bam && !params.skip_remove_duplicates_bam && !params.bai){
    process sambamba_dedup {
        tag "${prefix}"
        label "process_high"
        publishDir "${params.outdir}/sambamba_dedup", mode: 'copy'

        input:
        file(bam) from ch_bam_for_dedup

        output:
        set val(prefix), file(bam_dedup) into ch_dedup_bam_for_index, ch_dedup_bam_for_samtools_fastq

        script:
        buffer_size = task.memory.toMega()
        prefix = "${bam.getBaseName()}_dedup"
        bam_dedup = "${prefix}.bam"
        """
        sambamba markdup --remove-duplicates --sort-buffer-size ${buffer_size} --nthreads $task.cpus ${bam} ${bam_dedup}
        """
    }
}

if (params.bam && !params.skip_remove_duplicates_bam && !params.bai){
    process sambamba_index {
        tag "${bam_name}"
        label "process_medium"
        publishDir "${params.outdir}/sambamba_index", mode: 'copy'

        input:
        set val(bam_name), file(bam_dedup) from ch_dedup_bam_for_index

        output:
        file(bai_dedup) into ch_dedup_bai

        script:
        bai_dedup = "${bam_name}.bai"
        """
        sambamba index  --nthreads $task.cpus ${bam_dedup} ${bai_dedup}
        """
    }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --               SAMTOOLS VIEW GENOMIC REGION TO FASTA                 -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/*
 * STEP 0 - samtools view
 */

if (params.bam && !params.bed && !params.bai && !params.skip_remove_duplicates_bam) {
    process samtools_fastq_no_intersect {
    tag "$bam_name"
    label "process_low"
    publishDir "${params.outdir}/intersect_fastqs", mode: 'copy'

    input:
    set val(bam_name), file(bam_dedup) from ch_dedup_bam_for_samtools_fastq

    output:
    set val(bam_name), file(fastq) into ch_intersected

    script:
    fastq = "${bam_name}.fastq.gz"
    """
      samtools fastq -N ${bam_dedup} \\
      | gzip -c > ${fastq}
    """
    }
    ch_intersected
      // gzipped files are 20 bytes when empty
      .filter{ it[1].size() > 20 }
      .into { ch_read_files_fastqc; ch_read_files_trimming }
} else if (params.bam && params.bed && params.bai) {
    process samtools_view_fastq {
    tag "$interval_name"
    label "process_low"
    publishDir "${params.outdir}/intersect_fastqs", mode: 'copy'

    input:
    set val(interval_name), val(chrom), val(chromStart), val(chromEnd), file(bam), file(bai) from ch_bed_bam_bai

    output:
    set val(interval_name), file(fastq) into ch_intersected

    script:
    fastq = "${interval_name}.fastq.gz"
    """
    samtools view -hu $bam '${chrom}:${chromStart}-${chromEnd}' \\
      | samtools fastq -N - \\
      | gzip -c > ${fastq}
    """
    }
  ch_intersected
    // gzipped files are 20 bytes when empty
    .filter{ it[1].size() > 20 }
    .into { ch_read_files_fastqc; ch_read_files_trimming }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        FASTQ QC                                     -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/*
 * STEP 1 - FastQC
 */
if (!params.input_is_protein) {
  process fastqc {
      tag "$name"
      label 'process_medium'
      publishDir "${params.outdir}/fastqc", mode: 'copy',
          saveAs: { filename ->
                        filename.indexOf(".zip") > 0 ? "zips/$filename" : "$filename"
                  }

      input:
      set val(name), file(reads) from ch_read_files_fastqc

      output:
      file "*_fastqc.{zip,html}" into ch_fastqc_results

      script:
      """
      fastqc --quiet --threads $task.cpus $reads
      """
  }
} else {
  ch_fastqc_results = Channel.empty()
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                        ADAPTER TRIMMING                             -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/*
 * STEP 2 - fastp for read trimming
 */

if (!params.skip_trimming && !params.input_is_protein){
  process fastp {
      label 'process_low'
      tag "$name"
      publishDir "${params.outdir}/fastp", mode: 'copy',
        saveAs: {filename ->
                    if (filename.indexOf(".fastq.gz") == -1) "logs/$filename"
                    else if (reads[1] == null) "single_end/$filename"
                    else if (reads[1] != null) "paired_end/$filename"
                    else null
                }

      input:
      set val(name), file(reads) from ch_read_files_trimming

      output:
      set val(name), file("*trimmed.fastq.gz") into ch_reads_trimmed
      file "*fastp.json" into ch_fastp_results
      file "*fastp.html" into ch_fastp_html

      script:
      // One set of reads --> single end
      if (reads[1] == null) {
          """
          fastp \\
              --low_complexity_filter \\
              --trim_poly_x \\
              --in1 ${reads} \\
              --out1 ${name}_R1_trimmed.fastq.gz \\
              --json ${name}_fastp.json \\
              --html ${name}_fastp.html
          """
      } else if (reads[1] != null ){
        // More than one set of reads --> paired end
          """
          fastp \\
              --low_complexity_filter \\
              --trim_poly_x \\
              --in1 ${reads[0]} \\
              --in2 ${reads[1]} \\
              --out1 ${name}_R1_trimmed.fastq.gz \\
              --out2 ${name}_R2_trimmed.fastq.gz \\
              --json ${name}_fastp.json \\
              --html ${name}_fastp.html
          """
      } else {
        """
        echo name ${name}
        echo reads: ${reads}
        echo "Number of reads is not equal to 1 or 2 --> don't know how to trim non-paired-end and non-single-end reads"
        """
      }
  }
} else if (!params.input_is_protein) {
  ch_reads_trimmed = ch_read_files_trimming
} else {
  ch_fastp_results = Channel.empty()
}



if (!params.input_is_protein && params.protein_searcher == 'diamond'){
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /* --                                                                     -- */
  /* --     PREPARE PEPTIDE DATABASE TO PREDICT PROTEIN-CODING READS        -- */
  /* --                                                                     -- */
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /*
   * STEP 2 - sencha index
   */
  process make_protein_index {
    tag "${peptides}__${bloom_id}"
    label "process_low"

    publishDir "${params.outdir}/sencha/", mode: 'copy'

    input:
    file(peptides) from ch_proteome_translate_fasta
    each molecule from peptide_molecule
    each ksize from peptide_ksize

    output:
    set val(bloom_id), val(molecule),  val(ksize), file("${peptides.simpleName}__${bloom_id}.bloomfilter") into ch_sencha_bloom_filters

    script:
    bloom_id = "molecule-${molecule}_ksize-${ksize}"
    """
    sencha index \\
      --tablesize ${tablesize} \\
      --molecule ${molecule} \\
      --peptide-ksize ${ksize} \\
      --save-as ${peptides.simpleName}__${bloom_id}.bloomfilter \\
      ${peptides}
    """
  }

  // From Paolo - how to do translate on ALL combinations of bloom filters
   ch_sencha_bloom_filters
      .groupTuple(by: [0, 1, 2])
      .combine(ch_reads_trimmed)
      .dump( tag: 'ch_sencha_bloom_filters_grouptuple' )
      // [DUMP: ch_sencha_bloom_filters_grouptuple]
      //    [molecule-protein_ksize-12,
      //     'protein',
      //      '12',
      //      [ncbi_refseq_vertebrate_mammalian_ptprc_plus__np_only__molecule-protein_ksize-12.bloomfilter],
      //    'bonobo_liver_ptprc',
      //    bonobo_liver_ptprc_R1_trimmed.fastq.gz]
    .set{ ch_sencha_bloom_filters_grouptuple }


  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /* --                                                                     -- */
  /* --                   PREDICT PROTEIN-CODING READS                      -- */
  /* --                                                                     -- */
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /*
   * STEP 3 - sencha translate
   */
  process translate {
    tag "${sample_sketch_id}"
    label "process_long"
    publishDir "${params.outdir}/translate/${bloom_id}", mode: 'copy'

    input:
    tuple \
        val(bloom_id), val(alphabet), val(ksize), file(bloom_filter),  \
        val(sample_id), file(reads) \
        from ch_sencha_bloom_filters_grouptuple

    output:
    // TODO also extract nucleotide sequence of coding reads and do sourmash compute using only DNA on that?
    set val(sample_sketch_id), file(noncoding_nucleotides) into ch_noncoding_nucleotides_potentially_empty
    // Set first value to "false" so it's not treated as a differential hash, and only the sample_id is considered
    set val(sample_sketch_id), file(peptides_fasta) into ch_translated_proteins_potentially_empty
    set val(sample_sketch_id), file(coding_nucleotides) into ch_coding_nucleotides
    set val(sample_sketch_id), file(coding_scores) into ch_coding_scores_csv
    set val(sample_sketch_id), file(summary_json) into ch_coding_scores_json

    script:
    sample_sketch_id = "${sample_id}__${bloom_id}"
    noncoding_nucleotides = "${sample_sketch_id}__noncoding_reads_nucleotides.fasta"
    coding_nucleotides = "${sample_sketch_id}__coding_reads_nucleotides.fasta"
    peptides_fasta = "${sample_sketch_id}__coding_reads_peptides.fasta"
    coding_scores = "${sample_sketch_id}__coding_scores.csv"
    summary_json = "${sample_sketch_id}__coding_summary.json"
    """
    sencha translate \\
      --molecule ${alphabet} \\
      --peptide-ksize ${ksize} \\
      --jaccard-threshold ${jaccard_threshold} \\
      --noncoding-nucleotide-fasta ${noncoding_nucleotides} \\
      --coding-nucleotide-fasta ${coding_nucleotides} \\
      --csv ${coding_scores} \\
      --json-summary ${summary_json} \\
      --peptides-are-bloom-filter \\
      ${bloom_filter} \\
      ${reads} > ${peptides_fasta}
    """
  }

  // Remove empty files
  // it[0] = sample id
  // it[1] = bloom id
  // it[2] = sequence fasta file
  ch_translated_proteins_potentially_empty
    .filter{ it[1].size() > 0 }
    .dump(tag: "ch_translated_proteins_potentially_empty")
    // [DUMP: ch_translated_proteins_potentially_empty]
    //    ['NC-033660.1-74563649-74570299-+-516-0',
    //      molecule-protein,
    //      NC-033660.1-74563649-74570299-+-516-0__molecule-protein__coding_reads_peptides.fasta]
    .set{ ch_protein_seq_for_diamond }

  // Remove empty files
  // it[0] = sample bloom id
  // it[1] = sequence fasta file
  ch_noncoding_nucleotides_potentially_empty
    .filter { it[1].size() > 0 }
    .set { ch_noncoding_nucleotides }
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --             PERFORM DIFFERENTIAL HASH EXPRESSION                    -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/*
 * STEP 4 - Find hashes enriched in groups
 */
 if (params.input_is_protein && params.csv && params.diff_hash_expression){
  process diff_hash {
    tag "${group_cleaned}"
    label "process_medium"

    publishDir "${params.outdir}/diff_hash/${group}", mode: 'copy'

    input:
    set val(group), file(all_signatures) from ch_groups_with_all_signatures_for_diff_hash
    file metadata from ch_csv.collect()

    output:
    file("${group_cleaned}.log")
    file("*__hash_coefficients.csv")
    set val(group), file("*__informative_hashes.csv") into \
      ch_informative_hashes_for_hash2kmer, \
      ch_informative_hashes_files_for_grouped_search, \
      ch_informative_hashes_for_find_unaligned, \
      ch_informative_hashes_files_for_featurecounts

    script:
    group_cleaned = group.replaceAll(" ", "_").replaceAll("/", '-').toLowerCase()
    abundance_flag = diff_hash_with_abundance ? '--with-abundance' : ''
    """
    differential_hash_expression.py \\
        --ksize ${sourmash_ksize} \\
        --input-is-protein \\
        --n-jobs ${task.cpus} \\
        --group1 '${group}' \\
        --${sourmash_molecule} \\
        --no-dna \\
        --metadata-csv ${metadata} \\
        --use-sig-basename \\
        --penalty ${diff_hash_penalty} \\
        --solver ${diff_hash_solver} \\
        --max-group-size 100 \\
        --min-cells ${diff_hash_min_cells} \\
        --min-abundance ${diff_hash_min_abundance} \\
        ${abundance_flag} \\
        --inverse-regularization-strength ${diff_hash_inverse_regularization_strength} \\
        > '${group_cleaned}.log'
    """
  }


}



///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --              DOWNLOAD REFSEQ REFERENCE PROTEOME                     -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/*
 * STEP 6 - rsync to download refeseq
 */
 if (!existing_reference && need_refseq_download){
  // No protein fasta provided for searching for orthologs, need to
  // download refseq
  process download_refseq {
    tag "${refseq_release}"
    label "process_low"

    publishDir "${params.outdir}/ncbi_refseq/", mode: 'copy'

    output:
    // Enclose in parentheses to avoid "No such variable: process" error
    // Reference: https://github.com/nextflow-io/nextflow/issues/141
    file("${refseq_release}.fa.gz") into (ch_diamond_reference_fasta, ch_sourmash_reference_fasta)

    script:
    """
    rsync \\
          --prune-empty-dirs \\
          --archive \\
          --verbose \\
          --recursive \\
          --include '*protein.faa.gz' \\
          --exclude '/*' \\
          rsync://ftp.ncbi.nlm.nih.gov/refseq/release/${refseq_release}/ .
    zcat *.protein.faa.gz | gzip -c - > ${refseq_release}.fa.gz
    """
  }
}



///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --            PREPARE HASHES FOR SEARCHING WITH SOURMASH               -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
if (params.protein_searcher == 'sourmash' || params.hashes || params.diff_hash_expression ){

  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /* --                                                                     -- */
  /* --                    CONVERT HASHES TO SIGNATURES                     -- */
  /* --                                                                     -- */
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /*
   * STEP 4 - convert hashes to k-mers
   */
   if ( params.hashes || params.diff_hash_expression ){
    // Convert hashes to signatures for sourmash
    process hash2sig {
      tag "${group_cleaned}"
      label "process_low"

      publishDir "${params.outdir}/hash2sig/", mode: 'copy'

      input:
      set val(group), file(hashes) from ch_informative_hashes_files_for_grouped_search

      output:
      set val(group), file("${sig}") into ch_group_hash_sigs_to_query, ch_hash_sigs_from_hash2sig_to_print, ch_hash_sigs_from_hash2sig_to_join

      script:
      group_cleaned = groupCleaner(group)
      sig = "${group_cleaned}.sig"
      track_abundance = params.diff_hash_expression ? "--track-abundance" : ""
      """
      hash2sig.py \\
          --ksize ${sourmash_ksize} \\
          --no-dna \\
          --scaled ${sourmash_scaled} \\
          --input-is-protein \\
          --${sourmash_molecule} \\
          --output ${sig} \\
          ${track_abundance} \\
          ${hashes}
      """
    }

  }

  if ( params.csv_has_is_aligned ) {
    ch_per_group_unaligned_sig
      .combine( ch_informative_hashes_for_find_unaligned, by: 0 )
      // [DUMP: ch_group_to_hash_sig]
      // ['monocyte',
      //  [10X_P1_14__unaligned__GACTAACAGCATGGCA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //   10X_P1_14__unaligned__AACTGGTAGGTTCCTA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //   10X_P1_14__unaligned__CTAATGGCAGCATACT_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //   10X_P1_14__unaligned__ACACCCTGTAGCGTGA_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig,
      //   MACA_18m_M_LUNG_53__unaligned__TAAGTGCAGTGTCCCG_molecule-dayhoff_ksize-45_log2sketchsize-14_trackabundance-true.sig],
      // '2852067181280790833\n',
      //  hash-2852067181280790833,
      //  hash-2852067181280790833.sig]
      .dump( tag: 'ch_group_to_unaligned_sigs_with_diffhashes' )
      .set{ ch_group_to_unaligned_sigs_with_diffhashes }

    ///////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////
    /* --                                                                     -- */
    /* --       SEARCH UNALIGNED HASHES FOR DIFFERENTIAL HASHES               -- */
    /* --                                                                     -- */
    ///////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////
    /*
    * STEP 7 - Filter hashes for only unaligned ones
    */
    process is_hash_in_unaligned {
      tag "${sample_id}"
      label "process_low"

      publishDir "${params.outdir}/is_hash_in_unaligned", mode: 'copy'

      input:
      set val(group), val(is_aligned), file(sigs), file(diffhashes) from ch_group_to_unaligned_sigs_with_diffhashes

      output:
      file(hashes_only)
      set val(group), val(is_aligned), file(matches) into ch_hash_sigs_in_unaligned

      script:
      group_cleaned = groupCleaner(group)
      sample_id = "${group_cleaned}__${is_aligned}"
      hashes_only = "${group_cleaned}__hashes_only.txt"
      matches = "${sample_id}__matches.txt"
      """
      # Isolate hashes only --> Take first column
      cut -f1 ${diffhashes} -d, > ${hashes_only}
      rg \\
          --threads ${task.cpus} \\
          --files-with-matches \\
          --file ${hashes_only} \\
          ${sigs} \\
          > ${matches}
      """
    }
    ch_hash_sigs_in_unaligned
      .dump( tag: 'ch_hash_sigs_in_unaligned' )
      // Check that matches are nonempty
      .branch{
        aligned: it[1] == 'aligned'
        unaligned: it[1] == 'unaligned'
      }
      .set{ ch_hashes_sigs_branched }
  }


  if (!params.sourmash_index) {
    ///////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////
    /* --                                                                     -- */
    /* --                  MAKE SOURMASH INDEX                      -- */
    /* --                                                                     -- */
    ///////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////
    /*
     * STEP 7 - make peptide search database for DIAMOND
     */
    process sourmash_db_compute {
     tag "${sample_id}"
     label "process_low"

     // publishDir "${params.outdir}/reference/sourmash", mode: 'copy'

     input:
     file(reference_proteome) from ch_sourmash_reference_fasta

     output:
     file(output_log)
     file(sig) into ch_proteome_sig_for_sourmash_index

     script:
     sketch_id = "molecule-${sourmash_molecule}__ksize-${sourmash_ksize}__scaled-${sourmash_scaled}__track_abundance-true"
     sample_id = "${reference_proteome.simpleName}__${sketch_id}"
     sig = "${sample_id}.sig"
     output_log = "${sample_id}.log"
     """
     sourmash compute \\
        --ksizes ${sourmash_ksize} \\
        --input-is-protein \\
        --track-abundance \\
        --singleton \\
        --scaled ${sourmash_scaled} \\
        --no-dna \\
        --${sourmash_molecule} \\
        --output ${sig}\\
        ${reference_proteome} \\
        2> ${output_log}
     """
   }

    process sourmash_db_index {
      tag "${prefix}"
      label "process_medium"

      publishDir "${params.outdir}/reference/sourmash", mode: 'copy'

      input:
      file(reference_proteome_sig) from ch_proteome_sig_for_sourmash_index.collect()

      output:
      file(sbt_zip) into ch_sourmash_index

      script:
      prefix = "${reference_proteome_sig.simpleName}"
      sbt_zip = "${prefix}.sbt.zip"
      """
      sourmash index \\
          --ksize ${sourmash_ksize} \\
          --${sourmash_molecule} \\
          ${sbt_zip} \\
          ${reference_proteome_sig}
      """
    }
  }


  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /* --                                                                     -- */
  /* --          ITERATIVELY SEARCH FOR HASHES IN DATABASE                  -- */
  /* --                                                                     -- */
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /*
  * STEP 7 - Find hashes in database
  */
  process sourmash {
   tag "${sourmash_searcher}__${group_cleaned}"
   label "process_low"

   publishDir "${params.outdir}/sourmash/", mode: 'copy'

   input:
   file(sourmash_sbt_index) from ch_sourmash_index.collect()
   set val(group), file(query_sig) from ch_group_hash_sigs_to_query

   output:
   file(csv_output)
   file(matches)
   set val(group), file(unassigned) into ch_unassigned_sig_for_seqs, ch_unassigned_sig_for_search_sigs

   script:
   group_cleaned = groupCleaner(group)
   csv_output = "${group_cleaned}.csv"
   unassigned = "${group_cleaned}__unassigned.sig"
   sketch_id = "molecule-${sourmash_molecule}__ksize-${sourmash_ksize}__scaled-1__track_abundance-true"
   matches = "${group_cleaned}__matches.sig"
   generated_search_flag = sourmash_searcher == "search" ? ""  : "--debug --output-unassigned ${unassigned}"
   user_search_flags = sourmash_search_flags ? "${sourmash_search_flags}" : ""
   """
   sourmash ${sourmash_searcher} \\
      ${user_search_flags} \\
      ${generated_search_flag} \\
       --threshold 1e-100 \\
       --output ${csv_output} \\
       --ksize ${sourmash_ksize} \\
       --${sourmash_molecule} \\
       --save-matches ${matches} \\
       ${query_sig} \\
       ${sourmash_sbt_index}

   # Create empty files in case there were no matches so pipeline doesn't die
   touch ${unassigned}
   touch ${csv_output}
   touch ${matches}
   """
 }

 if ( params.diff_hash_expression && params.sourmash_searcher == "gather" ) {

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////
   /* --                                                                     -- */
   /* --     CONVERT SIGNATURE TO PLAIN TEXT HASHES                 -- */
   /* --                                                                     -- */
   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////
   /*
   * STEP 7 - Find signatures containing hashes
   */
   process sig2hash {
     tag "${group}"
     label "process_low"

     publishDir "${params.outdir}/sig2hash", mode: 'copy'

     input:
     set val(group), file(sig) from ch_unassigned_sig_for_seqs

     output:
     set val(group), file(hashes) into ch_unassigned_hashes_for_ripgrep, ch_unassigned_hashes_for_hash2kmer

     script:
     group_cleaned = groupCleaner(group)
     hashes = "${group_cleaned}__hashes.txt"
     """
     sig2hashes.py \\
         --output-hashes ${hashes} \\
         ${sig} \\
     """
   }

   ch_unassigned_hashes_for_ripgrep
      .join( ch_group_to_signatures )
      .set { ch_group_to_unassigned_hashes_and_sigs }


    ///////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////
    /* --                                                                     -- */
    /* --                 FIND SIGNATURES CONTAINING HASHES                   -- */
    /* --                                                                     -- */
    ///////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////
    /*
    * STEP 7 - Find signatures containing hashes
    */
    process samples_with_unassigned {
     tag "${group_cleaned}"
     label "process_low"

     publishDir "${params.outdir}/samples_with_unassigned/", mode: 'copy'

     input:
     set val(group), file(hashes), file(sigs) from ch_group_to_unassigned_hashes_and_sigs

     output:
     set val(group), file(matches), file(hashes) into ch_sample_sigs_with_unassigned

     script:
     group_cleaned = groupCleaner(group)
     matches = "${group_cleaned}__samples_with_unassigned_hashes.txt"
     """
     rg \\
        --threads ${task.cpus} \\
        --files-with-matches \\
        --file ${hashes} \\
        ${sigs} \\
        > ${matches}
     """
    }

    ch_sample_sigs_with_unassigned
      .dump ( tag: 'ch_sample_sigs_with_unassigned' )
      .map { it -> tuple(it[1].splitText(), it[0], it[2]) }
      // [ [sample1.sig, sample2, sample3.sig], group1]
      // [ [sample4.sig, sample5, sample6.sig], group2]
      .transpose()
      // [ sample1.sig, group1]
      // [ sample2.sig, group1]
      // [ sample3.sig, group1]
      // [ sample4.sig, group2]
      // [ sample5.sig, group2]
      // [ sample6.sig, group2]
      // Relies on sourmash signatures ending in .sig, which is currently true..
      .map { it -> tuple(it[0].replaceAll('.sig\\s+', ''), it[1], it[2])}
      .dump ( tag: 'ch_sample_sigs_with_unassigned__tuple_splittext')
      .join ( ch_sig_filename_to_fasta, by: 0 )
      .dump ( tag: 'ch_sample_sigs_with_unassigned__tuple_splittext__join_fastas' )
      .groupTuple ( by: 1 )
      // it[0] --> sample ids, skip this
      // it[1] --> group name
      // it[2][0] --> hahes.txt (same for everyone so take the first one)
      // it[3] --> fastas (want all as one so flatten)
      .map { it -> tuple(it[1], it[2][0], it[3].flatten())}
      .dump ( tag: 'ch_group_hashes_fastas__diffhash' )
      .set { ch_group_hashes_fastas }

} else if ( params.hashes ){
  ch_protein_fastas
    .map{ it -> it[1] }  // get only the file, not the sample id
    .collect()           // make a single flat list
    .map{ it -> [it] }   // Nest within a list so the next step does what I want
    .set{ ch_protein_fastas_flat_list }

  Channel.from(file(params.hashes).getBaseName())
    .combine(ch_hashes)
    .combine(ch_protein_fastas_flat_list)
    // [ "empty_group_name", hashes.txt, [ sample1.fasta, sample2.fasta, ... ] ]
    .dump ( tag: 'ch_group_hashes_fastas__hashes' )
    .set { ch_group_hashes_fastas }
}

if ( (params.diff_hash_expression || params.hashes) && (params.sourmash_searcher == "gather") ) {

   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////
   /* --                                                                     -- */
   /* --                 FIND SIGNATURES CONTAINING HASHES                   -- */
   /* --                                                                     -- */
   ///////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////////////////////
   /*
   * STEP 7 - Find signatures containing hashes
   */
    process hash2kmer_unassigned {
      tag "${group_cleaned}"
      label "process_low"

      publishDir "${params.outdir}/unassigned_seqs/", mode: 'copy'

      input:
      set val(group), file(hashes), file(group_fastas) from ch_group_hashes_fastas

      output:
      file(unassigned_kmers)
      set val(group), file(unassigned_sequences) into ch_unassigned_seqs_from_hash2kmer

      script:
      group_cleaned = groupCleaner(group)
      unassigned_sequences = "${group_cleaned}__unassigned.fasta"
      unassigned_kmers = "${group_cleaned}__unassigned_kmers.csv"
      """
      hash2kmer.py \\
          --ksize ${sourmash_ksize} \\
          --no-dna \\
          --input-is-protein \\
          --output-sequences ${unassigned_sequences} \\
          --output-kmers ${unassigned_kmers} \\
          --${sourmash_molecule} \\
          ${hashes} \\
          ${group_fastas}
      """
    }
    ch_unassigned_seqs_from_hash2kmer
      .filter { it -> it[1].size() > 0 }
      .set { ch_protein_seq_for_diamond }
   }
}



///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --       PREPARE PROTEIN SEQUENCES FOR SEARCHING WITH DIAMOND          -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
if ((params.protein_searcher == 'diamond') || (params.diff_hash_expression && (params.sourmash_searcher == "gather"))) {

  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /* --                                                                     -- */
  /* --                      PREPARE TAXA FOR DIAMOND                       -- */
  /* --                                                                     -- */
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /*
   * STEP 6 - unzip taxonomy information files for input to DIAMOND
   */
  if (!params.diamond_database ){
    process diamond_prepare_taxa {
      tag "${taxondmp_zip.baseName}"
      label "process_low"

      publishDir "${params.outdir}/ncbi_refseq/", mode: 'copy'

      input:
      file(taxondmp_zip) from ch_diamond_taxdmp_zip

      output:
      file("nodes.dmp") into ch_diamond_taxonnodes
      file("names.dmp") into ch_diamond_taxonnames

      script:
      """
      7z x ${taxondmp_zip}
      """
    }
  }


  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /* --                                                                     -- */
  /* --                  MAKE DIAMOND PEPTIDE DATABASE                      -- */
  /* --                                                                     -- */
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /*
   * STEP 7 - make peptide search database for DIAMOND
   */
  if (!params.diamond_database && (params.proteome_search_fasta || params.refseq_release)){
    process diamond_makedb {
     tag "${reference_proteome.baseName}"
     label "process_medium"

     publishDir "${params.outdir}/reference/diamond/", mode: 'copy'

     input:
     file(reference_proteome) from ch_diamond_reference_fasta
     file(taxonnodes) from ch_diamond_taxonnodes
     file(taxonnames) from ch_diamond_taxonnames
     file(taxonmap_gz) from ch_diamond_taxonmap_gz

     output:
     file("${reference_proteome.simpleName}_db.dmnd") into ch_diamond_db

     script:
     """
     diamond makedb \\
         --threads ${task.cpus} \\
         -d ${reference_proteome.simpleName}_db \\
         --taxonmap ${taxonmap_gz} \\
         --taxonnodes ${taxonnodes} \\
         --taxonnames ${taxonnames} \\
         --in ${reference_proteome}
     """
   }
  }

  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /* --                                                                     -- */
  /* --                  MAKE DIAMOND PEPTIDE DATABASE                      -- */
  /* --                                                                     -- */
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /*
   * STEP 8 - Search DIAMOND database for closest match to
   */
  process diamond_blastp {
    tag "${sample_id}"
    label "process_low"

    publishDir "${params.outdir}/diamond/", mode: 'copy'

    input:
    // Basenames from dumped channel:
    // [DUMP: ch_query_protein_sequences_with_diamond_db]
    //   [ENSPPYT00000000455__molecule-dayhoff,
    //   ENSPPYT00000000455__molecule-dayhoff__coding_reads_peptides.fasta,
    //   ncbi_refseq_vertebrate_mammalian_ptprc_db.dmnd]
    file(diamond_db) from ch_diamond_db.collect()
    set val(group), file(coding_peptides) from ch_protein_seq_for_diamond

    output:
    file(tsv) into ch_diamond_blastp_output

    script:
    group_cleaned = groupCleaner(group)
    sample_id = "${group_cleaned}"
    tsv = "${sample_id}__diamond__${diamond_db.simpleName}.tsv"
    output_format = "--outfmt 6 qseqid sseqid pident evalue bitscore stitle staxids sscinames sskingdoms sphylums"
    """
    diamond blastp \\
        ${output_format} \\
        --threads ${task.cpus} \\
        --max-target-seqs 3 \\
        --db ${diamond_db} \\
        --evalue 0.00001  \\
        --query ${coding_peptides} \\
        > ${tsv}
    """
  }
}



///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --             SEARCH NONCODING RNAS WITH INFERNAL                     -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/*
 * STEP 10 - Download/prepare Rfam databse
 */
if (params.search_noncoding && params.infernal_db) {
  /*
   * STEP 6 - unzip taxonomy information files for input to DIAMOND
   */
  if (hasExtension(params.infernal_db, "gz") ){
    process gunzip_infernal_cm {
        tag "$gz"
        publishDir path: { params.save_reference ? "${params.outdir}/reference/infernal" : params.outdir },
                   saveAs: { params.save_reference ? it : null }, mode: "${params.publish_dir_mode}"

        input:
        file gz from ch_infernal_db_gz

        output:
        file "${gz.baseName}" into ch_infernal_cm

        script:
        """
        gunzip -k --verbose --stdout --force ${gz} > ${gz.baseName}
        """
    }
  }

  process prepare_infernal_db {
      tag "${infernal_cm}"
      publishDir path: { params.save_reference ? "${params.outdir}/reference/infernal" : params.outdir },
                 saveAs: { params.save_reference ? it : null }, mode: "${params.publish_dir_mode}"

      input:
      file infernal_cm from ch_infernal_cm.collect()

      output:
      set val("${infernal_cm}"), file("${infernal_cm}*") into ch_infernal_db

      script:
      """
      cmpress ${infernal_cm}
      """
  }

  process search_noncoding {
      tag "${sample_id}"
      label "process_high"
      label "process_long"
      publishDir "${params.outdir}/infernal", mode: "${params.publish_dir_mode}"

      input:
      set val(db_name), file(db_index) from ch_infernal_db.collect()
      file rfam_clan_info from ch_rfam_clan_info.collect()
      set val(sample_id), file (fasta) from ch_noncoding_nucleotides

      output:
      file txt into ch_infernal_results

      script:
      txt = "${sample_id}.txt"
      """
      cmscan  \\
          --cut_ga \\
          --nohmmonly \\
          --clanin ${rfam_clan_info} \\
          --fmt 2 \\
          --rfam \\
          --cpu ${task.cpus} \\
          --tblout ${txt} \\
          ${db_name} \\
          ${fasta}
      """
  }

}




///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --              EXTRACT SEQUENCES CONTAINING HASHES                    -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/*
 * STEP 4 - Get all reads containing hashes from each asmple
 */
 do_hash2seqs = (params.diff_hash_expression || params.hashes) && (params.featurecounts_hashes)
 println "do_hash2seqs: ${do_hash2seqs}"
 if (do_hash2seqs){

  ch_group_to_id_fasta
    // do combine, not join, for all combinasion
    .combine( ch_informative_hashes_files_for_featurecounts, by: 0 )
    .dump ( tag: 'ch_hash_to_id_to_fasta_for_hash2kmer' )
    .set { ch_hash_to_id_to_fasta_for_hash2kmer }

  process hash2seqs_all {
    tag "${tag_id}"
    label "process_low"

    publishDir "${params.outdir}/hash2kmer_all/${hash_id}", mode: 'copy'

    input:
    tuple val(group), val(sample_id), file(fasta), file(hashes) from ch_hash_to_id_to_fasta_for_hash2kmer

    output:
    file(kmers)
    set val(group), val(sample_id), file(sequences) into ch_id_to_seqs_with_hashes_for_bioawk

    script:
    kmers = "${sample_id}__kmer.txt"
    sequences = "${sample_id}__sequences.fasta"
    """
    cut -f 1 -d, ${hashes} > hashes.txt
    hash2kmer.py \\
        --ksize ${sourmash_ksize} \\
        --no-dna \\
        --input-is-protein \\
        --output-sequences ${sequences} \\
        --output-kmers ${kmers} \\
        --${sourmash_molecule} \\
        hashes.txt \\
        ${fasta}
    """
  }

}


if (params.featurecounts_hashes) {
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /* --                                                                     -- */
  /* --                  MAKE BAM CONTAINING HASHES                         -- */
  /* --                                                                     -- */
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /*
   * STEP 9 - Extract sequence ids of reads containing hashes
   */
  process bioawk_read_ids_with_hash {
    tag "${tag_id}"
    label "process_low"

    publishDir "${params.outdir}/bioawk_get_read_ids_with_hash/", mode: 'copy'

    input:
    // ['13825713583252246154\n', 'Mostly marrow unaligned', hash-13825713583252246154__sequences.fasta]
    set val(sample_id), file(seqs_with_hashes) from ch_id_to_seqs_with_hashes_for_bioawk

    output:
    set val(sample_id), file(read_ids_with_hashes) into ch_id_to_read_ids_with_hashes
    set val(sample_id), file(read_headers_with_hashes) into ch_id_to_read_headers_with_hashes

    script:
    read_ids_with_hash = "${sample_id}__reads_ids_with_hash__regex_pattern.txt"
    read_headers_with_hash = "${sample_id}__reads_headers_with_hash.txt"
    """
    bioawk -c fastx '{ print \$name }' ${seqs_with_hashes} \\
      | awk ' { print "^" \$0 "\\s+" } '> ${read_ids_with_hash}
    bioawk -c fastx '{ print \$name" "\$comment }' ${seqs_with_hashes} \\
      > ${read_headers_with_hash}
    """
  }

  ch_id_to_read_ids_with_hashes
    .join ( ch_sample_id_and_bam )
    // [DUMP: ch_hash_sample_id_read_ids_bam_for_filter_bam]
    //    ['117030662087159\n',
    //     'SRR306777_GSM752631_mml_br_F_1',
    //     hash-117030662087159__SRR306777_GSM752631_mml_br_F_1__reads_ids_with_hash__regex_pattern.txt,
    //     SRR306777_GSM752631_mml_br_F_1Aligned.sortedByCoord.out.bam]
    .dump ( tag: 'ch_hash_sample_id_read_ids_bam_for_filter_bam' )
    .set { ch_hash_sample_id_read_ids_bam_for_filter_bam }


  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /* --                                                                     -- */
  /* --                  MAKE BAM CONTAINING HASHES                         -- */
  /* --                                                                     -- */
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /*
   * STEP 9 - Filter per-sample bams for aligned read ids
   */
  process filter_bam_for_reads_with_hashes {
    tag "${tag_id}"
    label "process_medium"

    publishDir "${params.outdir}/filter_bam_for_reads_with_hashes/", mode: 'copy'

    input:
    set val(sample_id), file(read_ids_with_hash), file(bam) from ch_hash_sample_id_read_ids_bam_for_filter_bam

    output:
    set val(sample_id), file(read_ids_mapped), file(reads_in_hashes_bam) into ch_bam_filtered
    set val(sample_id), file(read_ids_mapped) into ch_read_ids_mapped

    script:
    hash_cleaned = hashCleaner(hash)
    hash_id = "hash-${hash_cleaned}"
    tag_id = "${hash_id}__${sample_id}"
    reads_in_hashes_sam = 'reads_in_shared_hashes.sam'
    reads_in_hashes_bam = "${tag_id}__reads_in_shared_hashes.bam"
    read_ids_mapped = "${tag_id}__aligned_read_ids.txt"
    """
    samtools view -H ${bam} \\
      > header.sam
    # Use -F 4 to only show aligned reads, just in case bam has unaligned
    # Use pipes for everything instead of writing to disk as the bams could be
    # VERY large and want to avoid the cost of file I/O and writing to disk
    samtools view --threads ${task.cpus} -F 4 ${bam} \\
      | rg --file ${read_ids_with_hash} --threads ${task.cpus} - \\
      | cat header.sam - \\
      | samtools view --threads ${task.cpus} -1b - \\
      > ${reads_in_hashes_bam} \\
        || touch ${reads_in_hashes_bam}
    # touch a decoy file in case it fails, which means no reads were found
    samtools view ${reads_in_hashes_bam} \\
      | cut -f 1 \\
      > ${read_ids_mapped} \\
        || touch ${reads_in_hashes_bam}
    # touch a decoy file in case it fails, which means no reads were found
    """
  }

  ch_bam_filtered
    // At least 1 aligned read
    .filter { it -> it[2].size() > 0 }
    // Remove read ids (item 2)
    .map { it -> [it[0], it[1], it[3]]}
    .dump ( tag: 'ch_bam_filtered_for_featurecounts' )
    .set { ch_bam_filtered_for_featurecounts }


  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /* --                                                                     -- */
  /* --                RUN FEATURECOUNTS WITH ORTHOLOGY                     -- */
  /* --                                                                     -- */
  ///////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////////
  /*
   * STEP 11 - Filter per-sample bams for aligned read ids
   */
  if (params.csv_has_gtf && ! params.skip_orthology_qc) {
    println "In params.csv_has_gtf"

    ch_sample_id_to_gtf
      // Use cross, not join, so there are many hash-bam pairs
      .combine ( ch_bam_filtered_for_featurecounts, by: 0)
      .dump( tag : 'ch_sample_id_to_hash_to_bam_to_gtf' )
      // [DUMP: ch_sample_id_to_hash_to_bam_to_gtf]
      //    ['SRR306827_GSM752680_ppa_br_F_2',
      //       Pan_paniscus.panpan1.1.97.gtf,
      //      '2655017856511517\n',
      //      hash-2655017856511517__SRR306827_GSM752680_ppa_br_F_2__reads_in_shared_hashes.bam]
      .set { ch_sample_id_to_hash_to_bam_to_gtf }

     process featureCounts {
         label 'process_high'
         tag "${featurecounts_id}"
         publishDir "${params.outdir}/featureCounts", mode: "copy",
             saveAs: {filename ->
                 if (filename.indexOf("orthology_counts") > 0) "orthology_counts/$filename"
                 else if (filename.indexOf("_gene.featureCounts.txt.summary") > 0) "gene_count_summaries/$filename"
                 else if (filename.indexOf("_gene.featureCounts.txt") > 0) "gene_counts/$filename"
                 else "$filename"
             }

         input:
         set val(sample_id), file(gtf), val(hash), file(bam) from ch_sample_id_to_hash_to_bam_to_gtf
         file orthology_header from ch_orthology_types_header.collect()

         output:
         file "${featurecounts_id}_gene.featureCounts.txt" into geneCounts, featureCounts_to_merge
         file "${featurecounts_id}_gene.featureCounts.txt.summary" into featureCounts_logs
         file "${featurecounts_id}_orthology_counts*mqc.{txt,tsv}" optional true into featureCounts_orthology

         script:
         hash_cleaned = hashCleaner(hash)
         hash_id = "hash-${hash_cleaned}"
         featurecounts_id = "${hash_id}__${sample_id}"

         def featureCounts_direction = 0
         def extraAttributes = params.fc_extra_attributes ? "--extraAttributes ${params.fc_extra_attributes}" : ''
         if (forwardStranded && !unStranded) {
             featureCounts_direction = 1
         } else if (reverseStranded && !unStranded) {
             featureCounts_direction = 2
         }
         // Try to get real sample name
         sample_name = featurecounts_id - 'Aligned.sortedByCoord.out' - '_subsamp.sorted'
         orthology_qc = params.skip_orthology_qc ? '' : "featureCounts -a $gtf -g $orthology_type -o ${featurecounts_id}_orthology.featureCounts.txt -p -s $featureCounts_direction $bam"
         mod_orthology = params.skip_orthology_qc ? '' : "cut -f 1,7 ${featurecounts_id}_orthology.featureCounts.txt | tail -n +3 | cat $orthology_header - >> ${featurecounts_id}_orthology_counts_mqc.txt && mqc_features_stat.py ${featurecounts_id}_orthology_counts_mqc.txt -s $sample_name -f rRNA -o ${featurecounts_id}_orthology_counts_gs_mqc.tsv"
         """
         featureCounts \\
            -a $gtf \\
            -g ${params.fc_group_features} \\
            -t ${params.fc_count_type} \\
            -o ${featurecounts_id}_gene.featureCounts.txt \\
            $extraAttributes \\
            -T ${task.cpus} \\
            -p \\
            -s $featureCounts_direction \\
            $bam
         # Potentially count reads in orthologous gene features
         $orthology_qc
         # Summarize orthologous genes for multqic
         $mod_orthology
         """
     }
   }
}



///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/* --                                                                     -- */
/* --                            MULTIQC                                  -- */
/* --                                                                     -- */
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
/*
 * STEP 10 - MultiQC
 */
process multiqc {
    publishDir "${params.outdir}/MultiQC", mode: 'copy'

    input:
    file (multiqc_config) from ch_multiqc_config
    file (mqc_custom_config) from ch_multiqc_custom_config.collect().ifEmpty([])
    // TODO nf-core: Add in log files from your new processes for MultiQC to find!
    file ('fastqc/*') from ch_fastqc_results.collect().ifEmpty([])
    file ('software_versions/*') from ch_software_versions_yaml.collect()
    file ("fastp/*") from ch_fastp_results.collect().ifEmpty([])
    file workflow_summary from create_workflow_summary(summary)

    output:
    file "*multiqc_report.html" into ch_multiqc_report
    file "*_data"
    file "multiqc_plots"

    script:
    rtitle = custom_runName ? "--title \"$custom_runName\"" : ''
    rfilename = custom_runName ? "--filename " + custom_runName.replaceAll('\\W','_').replaceAll('_+','_') + "_multiqc_report" : ''
    custom_config_file = params.multiqc_config ? "--config $mqc_custom_config" : ''
    // TODO nf-core: Specify which MultiQC modules to use with -m for a faster run time
    """
    multiqc -f $rtitle $rfilename $custom_config_file -m fastqc -m fastp .
    touch multiqc_report.html multiqc_plots _data
    """
}

/*
 * STEP 11 - Output Description HTML
 */
process output_documentation {
    publishDir "${params.outdir}/pipeline_info", mode: 'copy'

    input:
    file output_docs from ch_output_docs

    output:
    file "results_description.html"

    script:
    """
    markdown_to_html.py $output_docs -o results_description.html
    """
}

/*
 * Completion e-mail notification
 */
workflow.onComplete {

    // Set up the e-mail variables
    def subject = "[nf-core/predictorthologs] Successful: $workflow.runName"
    if (!workflow.success) {
        subject = "[nf-core/predictorthologs] FAILED: $workflow.runName"
    }
    def email_fields = [:]
    email_fields['version'] = workflow.manifest.version
    email_fields['runName'] = custom_runName ?: workflow.runName
    email_fields['success'] = workflow.success
    email_fields['dateComplete'] = workflow.complete
    email_fields['duration'] = workflow.duration
    email_fields['exitStatus'] = workflow.exitStatus
    email_fields['errorMessage'] = (workflow.errorMessage ?: 'None')
    email_fields['errorReport'] = (workflow.errorReport ?: 'None')
    email_fields['commandLine'] = workflow.commandLine
    email_fields['projectDir'] = workflow.projectDir
    email_fields['summary'] = summary
    email_fields['summary']['Date Started'] = workflow.start
    email_fields['summary']['Date Completed'] = workflow.complete
    email_fields['summary']['Pipeline script file path'] = workflow.scriptFile
    email_fields['summary']['Pipeline script hash ID'] = workflow.scriptId
    if (workflow.repository) email_fields['summary']['Pipeline repository Git URL'] = workflow.repository
    if (workflow.commitId) email_fields['summary']['Pipeline repository Git Commit'] = workflow.commitId
    if (workflow.revision) email_fields['summary']['Pipeline Git branch/tag'] = workflow.revision
    email_fields['summary']['Nextflow Version'] = workflow.nextflow.version
    email_fields['summary']['Nextflow Build'] = workflow.nextflow.build
    email_fields['summary']['Nextflow Compile Timestamp'] = workflow.nextflow.timestamp

    // TODO nf-core: If not using MultiQC, strip out this code (including params.max_multiqc_email_size)
    // On success try attach the multiqc report
    def mqc_report = null
    try {
        if (workflow.success) {
            mqc_report = ch_multiqc_report.getVal()
            if (mqc_report.getClass() == ArrayList) {
                log.warn "[nf-core/predictorthologs] Found multiple reports from process 'multiqc', will use only one"
                mqc_report = mqc_report[0]
            }
        }
    } catch (all) {
        log.warn "[nf-core/predictorthologs] Could not attach MultiQC report to summary email"
    }

    // Check if we are only sending emails on failure
    email_address = params.email
    if (!params.email && params.email_on_fail && !workflow.success) {
        email_address = params.email_on_fail
    }

    // Render the TXT template
    def engine = new groovy.text.GStringTemplateEngine()
    def tf = new File("$baseDir/assets/email_template.txt")
    def txt_template = engine.createTemplate(tf).make(email_fields)
    def email_txt = txt_template.toString()

    // Render the HTML template
    def hf = new File("$baseDir/assets/email_template.html")
    def html_template = engine.createTemplate(hf).make(email_fields)
    def email_html = html_template.toString()

    // Render the sendmail template
    def smail_fields = [ email: email_address, subject: subject, email_txt: email_txt, email_html: email_html, baseDir: "$baseDir", mqcFile: mqc_report, mqcMaxSize: params.max_multiqc_email_size.toBytes() ]
    def sf = new File("$baseDir/assets/sendmail_template.txt")
    def sendmail_template = engine.createTemplate(sf).make(smail_fields)
    def sendmail_html = sendmail_template.toString()

    // Send the HTML e-mail
    if (email_address) {
        try {
            if (params.plaintext_email) { throw GroovyException('Send plaintext e-mail, not HTML') }
            // Try to send HTML e-mail using sendmail
            [ 'sendmail', '-t' ].execute() << sendmail_html
            log.info "[nf-core/predictorthologs] Sent summary e-mail to $email_address (sendmail)"
        } catch (all) {
            // Catch failures and try with plaintext
            [ 'mail', '-s', subject, email_address ].execute() << email_txt
            log.info "[nf-core/predictorthologs] Sent summary e-mail to $email_address (mail)"
        }
    }

    // Write summary e-mail HTML to a file
    def output_d = new File("${params.outdir}/pipeline_info/")
    if (!output_d.exists()) {
        output_d.mkdirs()
    }
    def output_hf = new File(output_d, "pipeline_report.html")
    output_hf.withWriter { w -> w << email_html }
    def output_tf = new File(output_d, "pipeline_report.txt")
    output_tf.withWriter { w -> w << email_txt }

    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_red = params.monochrome_logs ? '' : "\033[0;31m";
    c_reset = params.monochrome_logs ? '' : "\033[0m";

    if (workflow.stats.ignoredCount > 0 && workflow.success) {
        log.info "-${c_purple}Warning, pipeline completed, but with errored process(es) ${c_reset}-"
        log.info "-${c_red}Number of ignored errored process(es) : ${workflow.stats.ignoredCount} ${c_reset}-"
        log.info "-${c_green}Number of successfully ran process(es) : ${workflow.stats.succeedCount} ${c_reset}-"
    }

    if (workflow.success) {
        log.info "-${c_purple}[nf-core/predictorthologs]${c_green} Pipeline completed successfully${c_reset}-"
    } else {
        checkHostname()
        log.info "-${c_purple}[nf-core/predictorthologs]${c_red} Pipeline completed with errors${c_reset}-"
    }

}

// Check file extension
def hasExtension(it, extension) {
    it.toString().toLowerCase().endsWith(extension.toLowerCase())
}

def nfcoreHeader() {
    // Log colors ANSI codes
    c_black = params.monochrome_logs ? '' : "\033[0;30m";
    c_blue = params.monochrome_logs ? '' : "\033[0;34m";
    c_cyan = params.monochrome_logs ? '' : "\033[0;36m";
    c_dim = params.monochrome_logs ? '' : "\033[2m";
    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_reset = params.monochrome_logs ? '' : "\033[0m";
    c_white = params.monochrome_logs ? '' : "\033[0;37m";
    c_yellow = params.monochrome_logs ? '' : "\033[0;33m";

    return """    -${c_dim}--------------------------------------------------${c_reset}-
                                            ${c_green},--.${c_black}/${c_green},-.${c_reset}
    ${c_blue}        ___     __   __   __   ___     ${c_green}/,-._.--~\'${c_reset}
    ${c_blue}  |\\ | |__  __ /  ` /  \\ |__) |__         ${c_yellow}}  {${c_reset}
    ${c_blue}  | \\| |       \\__, \\__/ |  \\ |___     ${c_green}\\`-._,-`-,${c_reset}
                                            ${c_green}`._,._,\'${c_reset}
    ${c_purple}  nf-core/predictorthologs v${workflow.manifest.version}${c_reset}
    -${c_dim}--------------------------------------------------${c_reset}-
    """.stripIndent()
}

def checkHostname() {
    def c_reset = params.monochrome_logs ? '' : "\033[0m"
    def c_white = params.monochrome_logs ? '' : "\033[0;37m"
    def c_red = params.monochrome_logs ? '' : "\033[1;91m"
    def c_yellow_bold = params.monochrome_logs ? '' : "\033[1;93m"
    if (params.hostnames) {
        def hostname = "hostname".execute().text.trim()
        params.hostnames.each { prof, hnames ->
            hnames.each { hname ->
                if (hostname.contains(hname) && !workflow.profile.contains(prof)) {
                    log.error "====================================================\n" +
                            "  ${c_red}WARNING!${c_reset} You are running with `-profile $workflow.profile`\n" +
                            "  but your machine hostname is ${c_white}'$hostname'${c_reset}\n" +
                            "  ${c_yellow_bold}It's highly recommended that you use `-profile $prof${c_reset}`\n" +
                            "============================================================"
                }
            }
        }
    }
}



// Utility functions for sanitizing output
def groupCleaner(group) {
  return group.replaceAll(' ', '_').replaceAll('/', '-slash-').toLowerCase()
}

def hashCleaner(hash) {
  return hash.replaceAll('\\n', '')
}
